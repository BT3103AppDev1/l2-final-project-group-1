import { type PropType } from 'vue';
export declare const Collapse: import("vue").DefineComponent<{
    /** Boolean value to control collapse. */
    when: {
        type: BooleanConstructor;
        required: true;
    };
    /** Collapsed state height in px, defaults to `0`. */
    baseHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /** Element tag to use instead of `div`. */
    as: {
        type: PropType<keyof HTMLElementTagNameMap>;
        required: false;
        default: string;
    };
    /** Callback on expand transition start. */
    onExpand: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on expand transition completed. */
    onExpanded: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on collapse transition start. */
    onCollapse: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on collapse transition completed. */
    onCollapsed: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /** Boolean value to control collapse. */
    when: {
        type: BooleanConstructor;
        required: true;
    };
    /** Collapsed state height in px, defaults to `0`. */
    baseHeight: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    /** Element tag to use instead of `div`. */
    as: {
        type: PropType<keyof HTMLElementTagNameMap>;
        required: false;
        default: string;
    };
    /** Callback on expand transition start. */
    onExpand: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on expand transition completed. */
    onExpanded: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on collapse transition start. */
    onCollapse: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
    /** Callback on collapse transition completed. */
    onCollapsed: {
        type: PropType<() => void>;
        required: boolean;
        default: () => void;
    };
}>>, {
    baseHeight: number;
    as: keyof HTMLElementTagNameMap;
    onExpand: () => void;
    onExpanded: () => void;
    onCollapse: () => void;
    onCollapsed: () => void;
}>;
